<?php
declare(strict_types=1);

/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Core\Configure;
use Cake\Event\EventInterface;
use Cake\Http\Exception\ForbiddenException;
use Cake\Http\Exception\NotFoundException;
use Cake\Http\Response;
use Cake\Routing\Router;
use Cake\View\Exception\MissingTemplateException;

/**
 * Static content controller
 *
 * This controller will render views from templates/Pages/
 *
 * @link https://book.cakephp.org/4/en/controllers/pages-controller.html
 */
class CodeBlocksController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        $this->set('webroot', Router::url('/'));
        $this->viewBuilder()->setLayout('code_blocks');
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
    }

    public function home() {

    }


    function index() {
        $entity = $this->CodeBlocks->newEmptyEntity();
        $session = $this->request->getSession();
        $postData = $this->request->getData();

        if (isset($_GET['reset'])) {
            $session->delete('sessionData');
        }

        if (!empty($postData)) {
            $session->write('sessionData', $postData);
        } else {
            $postData = $session->read('sessionData');
        }


        if ($postData) {
            $this->CodeBlocks->patchEntity($entity, $postData);
        }

        //dd($subscription);
        $this->set('CodeBlocks', $entity);

        $cols = $this->CodeBlocks->getSchema()->columns();
        $this->set('cols', $cols);

        $rows = $this->CodeBlocks->find()->limit(20);
        $this->set(compact('rows'));
    }//index

    function edit($id=false) {

        $cols = $this->MODEL->getSchema()->columns();
        $this->set('cols', $cols);

        $row = $this->MODEL->newEmptyEntity();
        $postData = $this->request->getData();

        if (!empty($postData)) {
            $row = $this->MODEL->patchEntity($row, $postData);
            if ($this->MODEL->save($row)) {
                $this->Flash->success('Saved');
                if (in_array($row['cameFrom'], ['/', ''])) {
                    $this->redirect(['action' => 'index']);
                } else {
                    $this->redirect($row['cameFrom']);
                }
            } else {
                $this->Flash->error('Error saving');
            }
        } else {// end of  post
            if ($id === 'new') {
                //New - row entity will be used
            } else {
                $row = $this->MODEL->get($id);
            }
            $row->cameFrom = $this->referer();
        }
        $this->set('row', $row);
    }//edit

    function delete($id = NULL) {
        if (!$id) {
            $this->Flash->error('Specify ID');
            $this->redirect(array('prefix'=>'Staff', 'action' => 'index'));
        }else {
            $entity = $this->MODEL->get($id);
            if ($this->MODEL->delete($entity)) {
                $this->Flash->success('Deleted '.$entity->name);
            } else {
                $this->Flash->error('Error cannot delete');
            }
            $this->redirect($this->referer());
        }
    }//delete

    public function duplicate($id) {
        if (!$id) {
            $this->Flash->error('Specify ID');
            return $this->redirect($this->referer());
        } else {
            // Fetch the existing entity
            $entity = $this->MODEL->get($id);

            // Convert the entity to an array, reset the id and other fields that need to be unique
            $data = $entity->toArray();
            unset($data['id']); // Remove the ID to let CakePHP know it's a new entity

            // Create a new entity instance with the duplicated data
            $newEntity = $this->MODEL->newEntity($data);

            if ($this->MODEL->save($newEntity)) {
                $this->Flash->success('Duplicated ' . $newEntity->name);
                return $this->redirect(['action' => 'edit', $newEntity->id]);
            } else {
                $this->Flash->error('Error, cannot duplicate');
                return $this->redirect($this->referer());
            }
        }
    }





}
