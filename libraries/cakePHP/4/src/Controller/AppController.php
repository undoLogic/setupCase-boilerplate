<?php
declare(strict_types=1);

/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */




namespace App\Controller;

use Cake\Controller\Controller;
//use Cake\Error\Debugger;
use Cake\Core\Configure;
use Cake\Event\EventInterface;
use Cake\Log\Log;
use Cake\Routing\Router;
use Cake\Http\Session\DatabaseSession;

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @link https://book.cakephp.org/4/en/controllers.html#the-app-controller
 */
class AppController extends Controller
{
    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this->loadComponent('FormProtection');`
     *
     * @return void
     */

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        //our RBAC Middleware will handle it all
        $this->Authentication->addUnauthenticatedActions([ $this->request->getAttribute('params')['action'] ]);

        // language
        $this->setupAuth();

        Log::debug('appcontroller');
        $this->set('webroot', Router::url('/'));

    }// end of beforeFilter

    public function initialize(): void
    {
        parent::initialize();
        $this->loadComponent('RequestHandler');
        $this->loadComponent('Flash');

        $this->loadComponent('Authentication.Authentication');
    }

    function setupAuth()
    {
        $access = $this->request->getAttribute('access');

        if (!empty($access)) {
            $this->set('isLoggedIn', true);
        } else {
            $this->set('isLoggedIn', NULL);
        }

//        $identity = $this->request->getAttribute('identity');
//        pr ($identity->get('id'));
//        pr ($identity->get('email'));
//        pr ($identity->get('user_type'));
         // pr ($this->request);

    }

    private function session()
    {
        $session = $this->getRequest()->getSession();
        return $session;
    }

    public function writeToLog($filename, $message, $newLine = false)
    {
        if ($newLine) {
            $message = "\n" .date('Ymd-His') . '-'.microtime(true) . ' > ' . $message;
        } else {
            $message = ' > ' . $message;
        }
        if ($filename == 'debug') {
            Log::debug($message);
        } else if ($filename == 'error') {
            Log::error($message);
        } else {
            die($filename.' is not setup yet');
        }

        //old method allowing to have same line logs
        //file_put_contents(LOGS.DS.$filename.'.log', $message, FILE_APPEND);
    }

    function jsonHeaders($data){
        header('Content-Type: application/json');
        echo $data;
        exit;
    }

}
