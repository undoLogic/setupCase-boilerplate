<?php
declare(strict_types=1);

/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */

namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Event\EventInterface;
use Cake\Routing\Router;
use Cake\Http\Session\DatabaseSession;

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @link https://book.cakephp.org/4/en/controllers.html#the-app-controller
 */
class AppController extends Controller
{
    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this->loadComponent('FormProtection');`
     *
     * @return void
     */

    public function beforeFilter(EventInterface $event)
    {
        //pr($this->request->getAttributes()); exit;
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        // language
        $this->setupLanguage();

        $this->setupAuth();

        $this->set('webroot', Router::url('/'));

    }// end of beforeFilter

    public function initialize(): void
    {
        parent::initialize();
        $this->loadComponent('RequestHandler');
        $this->loadComponent('Flash');
    }


    var $rbac = [
        //'user_type_id' => 'prefix',
        111 => ['Admin' => [], 'Manager' => [], 'User' => []],
        30 => ['Manager' => [], 'User' => []],
        10 => ['User' => []],
    ];

    function getLoggedInUser()
    {
        $session = $this->request->getSession();
        return $session->read('User');
    }

    function setupAuth()
    {
        $this->writeToLog('debug', 'SetupAuth: '.json_encode( $this->request->getAttributes()['here']), true);

        $loggedUser = $this->getLoggedInUser();
        //pr($loggedUser); exit;
        if (!empty($loggedUser)) {
            $this->writeToLog('debug', 'isLoggedIn');
            $this->set('isLoggedIn', true);

            if (isset($this->rbac[$loggedUser['user_type_id']])) {
                $this->set('loggedAccess', $this->rbac[$loggedUser['user_type_id']]);
                $this->writeToLog('debug', 'loggedAccess: '.json_encode( $this->rbac[$loggedUser['user_type_id']] ));
            } else {
                die('That user_type_id is not recognized');
                $this->writeToLog('debug', 'ERROR: user_type_id is NOT recognized');
            }
        }

        if (isset($this->request->getAttributes()['params']['prefix'])) {
            //there is a prefix which requires login
            $this->writeToLog('debug', 'PrefixPresent');
            if (empty($loggedUser)) {
                $this->writeToLog('debug', 'NOT logged IN - Redirect to /login');
                $this->Flash->error('You must login'); //exit;
                $this->redirect(array('prefix' => false, 'controller' => 'Users', 'action' => 'login'));
            } else {
                $this->writeToLog('debug', 'user IS logged in');
                $prefix = $this->request->getAttributes()['params']['prefix'];
                if (isset($this->rbac[$loggedUser['user_type_id']][$prefix])) {
                    // allowed to access with this prefix
                    $this->writeToLog('debug', 'user is allowed to access '.$prefix);
                } else {
                    $this->writeToLog('debug', 'user does NOT have access to: '.$prefix);
                    $this->Flash->error('You do not have access to ' . $prefix);
                    //$this->redirect($this->referer());
                    $this->redirect('/login');
                }
            }
        } else {
            //die('no prefix');
        }
    }

    function setupLanguage()
    {
        $this->writeToLog('debug', 'setupLanguage', true);
        $url_language = $this->request->getParam('language');
        if ($url_language != null && in_array($url_language, ['en_US', 'fr_CA'])) {
            //if there is a language in the address bar
            $current_language = $url_language;
            $this->session()->write(['current_language' => $url_language]);
            $this->language = $current_language;
            $this->writeToLog('debug', 'Address bar: '.$current_language, false);
        } elseif (!empty($this->session()->read('current_language'))) {
            // if we have a language session
            $current_language = $this->session()->read('current_language');
            $this->session()->write(['current_language' => $current_language]);
            $this->language = $current_language;
            $this->writeToLog('debug', 'Session: '.$current_language, false);
        } elseif (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {
            // we use what the browser language they are viewing
            $current_language = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 5);
            $current_language = str_replace('-', '_', $current_language);
            $this->session()->write(['current_language' => $current_language]);
            $this->language = $current_language;
            $this->writeToLog('debug', 'Browser: '.$current_language, false);

        } else {
            // default language
            $current_language = 'en_US';
            $this->language = $current_language;
            $this->session()->write(['current_language' => $current_language]);
            $this->writeToLog('debug', 'Default: '.$current_language, false);
        }

        //Make sure we always have a language in the address bar
        $attributes = $this->request->getAttributes();
        if (!isset($attributes['params']['language'])) {
            $redirectArray = array();
            $redirectArray['language'] = $this->language;
            if (isset($attributes['params']['?'])) {
                $redirectArray['?'] = $attributes['params']['?'];
            }
            if (!empty($attributes['params']['pass'])) {
                $redirectArray = $redirectArray + $attributes['params']['pass'];
            }

            $this->writeToLog('debug', 'Language-NOT-SET redirecting to '.json_encode($redirectArray), false);

            $this->redirect($redirectArray);
        }

        //in our view we only care about a basic language (eg en / fr) not the extended version of a language
        if (substr($current_language, 0, 2) === 'fr') {
            $this->set('baseLang', 'fr');
        } else {
            $this->set('baseLang', 'en');
        }

        $this->set(compact('current_language'));

        return $current_language;
    }// end of setupLanguage

    private function session()
    {
        $session = $this->getRequest()->getSession();
        return $session;
    }

    public function writeToLog($filename, $message, $newLine = false)
    {
        if ($newLine) {
            $message = "\n" . date('Ymd-His') . ' > ' . $message;
        } else {
            $message = ' > ' . $message;
        }
        file_put_contents(LOGS.DS.$filename.'.log', $message, FILE_APPEND);
    }

}
